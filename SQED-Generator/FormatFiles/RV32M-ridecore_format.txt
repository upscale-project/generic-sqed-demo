# You can use python style comments with (#)
# to add notes, or comment out lines.

# Copyright (c) Stanford University
# 
# This source code is patent protected and being made available under the
# terms explained in the ../LICENSE-Academic and ../LICENSE-GOV files.

# Author: Mario J Srouji
# Email: msrouji@stanford.edu

SECTIONS = SIC ISA QEDCONSTRAINTS REGISTERS MEMORY BITFIELDS INSTYPES INSFIELDS INSREQS R I LW SW NOP

_SIC
MODULENAME
inst_constraint0 = NULL

COUNTER
state_counter = 10

RESET
reset_x = 1

REGFILE
pipe.aregfile.regfile.mem = NULL

MEMORY
datamemory.mem = NULL

DESTINATIONREG
rd_copy = 5

IMMEDIATE
imm_copy = 5

REGVALUE
val1 = 5
val2 = 5

DELAY
LW = 1
SW = 2

GENERAL
model_files = ridecore.vlist[top]
model_files = init.ssts
model_files = nop_m.ssts
model_files = state_copy.ssts 
abstract_clock = True
vcd = True
no_arrays = False
default_initial_value = 0

DEFAULT
solver_name = btor
prove = False

CHECK
description = "Check for Single Instruction"
verification = safety
bmc_length = 8

ASSUMPTIONS
CONSTRAINT R,I,LW,SW,(rd != 0_5)

#PROPERTIES

_ISA
num_registers = 32
instruction_length = 32
pipeline_depth = 6
active_low = 1

_QEDCONSTRAINTS
# Divides register space in half for duplicate instructions
half_registers = 1
# Divides memory in half and uses unsigned addresses
half_memory = 1

# Defines which fields are registers for
# both the constraints, and modify file
_REGISTERS
rd
rs1
rs2

# Defines the memory fields to be modified in the 
# modify file 
_MEMORY
imm12
imm7

_BITFIELDS
funct7 = 31 25
funct3 = 14 12
rd = 11 7
rs1 = 19 15
rs2 = 24 20
opcode = 6 0
shamt = 24 20
imm12 = 31 20
imm7 = 31 25
imm5 = 11 7

# Putting constraints here affects
# the modify file to define the memory
# instructions 
_INSTYPES
CONSTRAINT MEMORYTYPE,LW,SW
CONSTRAINT IMMEDIATETYPE,I
CONSTRAINT REGISTERTYPE,R
CONSTRAINT NOPTYPE,NOP

R
I
# Don't allow load word -- not needed for this demo
# LW
SW
NOP

_INSFIELDS
R = funct7 rs2 rs1 funct3 rd opcode
I = imm12 rs1 funct3 rd opcode
LW = imm12 rs1 funct3 rd opcode
SW = imm7 rs2 rs1 funct3 imm5 opcode
NOP = imm12 rs1 funct3 rd opcode

# Putting constraints here affects the 
# decoder file 
_INSREQS
R
# Put the constraints here for each 
# instruction type so that they are added 
# into the decoder file as part of 
# the IS_ins decoding process
opcode = 0110011

I
opcode = 0010011

LW
opcode = 0000011
funct3 = 010

SW
opcode = 0100011
funct3 = 010

# Adding constraints
# in the instruction types
# below affects the constraints file output
_R
# Adding a constraint here puts it as an
# instruction or "format" type constraint

ADD
# Putting a constraint here puts it
# as a constraint for the specific instruction
# in the constraints file
funct3 = 000
funct7 = 0000000
opcode = 0110011

SUB
funct3 = 000
funct7 = 0100000
opcode = 0110011

SLL
funct3 = 001
funct7 = 0000000
opcode = 0110011

SLT
funct3 = 010
funct7 = 0000000
opcode = 0110011

SLTU
funct3 = 011
funct7 = 0000000
opcode = 0110011

XOR
funct3 = 100
funct7 = 0000000
opcode = 0110011

SRL
funct3 = 101
funct7 = 0000000
opcode = 0110011

SRA
funct3 = 101
funct7 = 0100000
opcode = 0110011

OR
funct3 = 110
funct7 = 0000000
opcode = 0110011

AND
funct3 = 111
funct7 = 0000000
opcode = 0110011

MUL
funct3 = 000
funct7 = 0000001
opcode = 0110011

MULH
funct3 = 001
funct7 = 0000001
opcode = 0110011

MULHSU
funct3 = 010
funct7 = 0000001
opcode = 0110011

MULHU
funct3 = 011
funct7 = 0000001
opcode = 0110011

_I
ADDI
funct3 = 000
opcode = 0010011

SLTI
funct3 = 010
opcode = 0010011

SLTIU
funct3 = 011
opcode = 0010011

XORI
funct3 = 100
opcode = 0010011

ORI
funct3 = 110
opcode = 0010011

ANDI
funct3 = 111
opcode = 0010011

SLLI
funct3 = 001
funct7 = 0000000
opcode = 0010011

SRLI
funct3 = 101
funct7 = 0000000
opcode = 0010011

SRAI
funct3 = 101
funct7 = 0100000
opcode = 0010011

_LW
CONSTRAINT (instruction[31:30] == 00)

LW
rs1 = 00000
opcode = 0000011
funct3 = 010

_SW
CONSTRAINT (instruction[31:30] == 00)

SW
rs1 = 00000
opcode = 0100011
funct3 = 010

_NOP
NOP
opcode = 1111111




